current_path = '<%= @current_path %>'

worker_processes <%= @worker_processes %>
working_directory current_path
listen <%= "'#{@unicorn_listen}'" + "#{', ' + @unicorn_listen_options.inspect if @unicorn_listen_options}" %>
timeout <%= @unicorn_timeout %>
pid '<%= @unicorn_pid %>'

stderr_path '<%= File.join(@shared_path, 'log', 'unicorn.stderr.log') %>'
stdout_path '<%= File.join(@shared_path, 'log', 'unicorn.stdout.log') %>'

preload_app <%= @unicorn_preload_app %>

GC.respond_to?(:copy_on_write_friendly=) and
  GC.copy_on_write_friendly = <%= @cow_friendly %>

before_fork do |server, worker|
  defined?(ActiveRecord::Base) and
    ActiveRecord::Base.connection.disconnect!

  ##
  # immediately start loading up a new version of itself (loaded with a new
  # version of our app). When this new Unicorn is completely loaded
  # it will begin spawning workers. The first worker spawned will check to
  # see if an .oldbin pidfile exists. If so, this means we've just booted up
  # a new Unicorn and need to tell the old one that it can now die. To do so
  # we send it a QUIT.
  #
  # Using this method we get 0 downtime deploys.
  old_pid = "#{server.config[:pid]}.oldbin"

  if File.exists?(old_pid) && server.pid != old_pid
    begin
      sig = (worker.nr + 1) >= server.worker_processes ? :TERM : :TTOU
      Process.kill(sig, File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
      # someone else did our job for us
    end
  end
  sleep 1

end

after_fork do |server, worker|
  worker.user('<%= @user %>', '<%= @group %>') if Process.euid == 0

  defined?(ActiveRecord::Base) and
    ActiveRecord::Base.establish_connection
end

before_exec do |server|
  # Set ENV
<% @environment_variables.each do |k, v| -%>
  ENV['<%= k.to_s.upcase %>'] = '<%= v %>'
<% end -%>

  # Configure bundler to use proper paths if app provides a Gemfile
  if(File.exists?("#{current_path}/Gemfile"))
    paths = ENV["PATH"].to_s.split(':')
    paths.unshift '<%= @bundled_bin %>'
    ENV["PATH"] = paths.uniq.join(':')

    ENV['GEM_HOME'] = ENV['GEM_PATH'] = '<%= @bundled_path %>'
    ENV['BUNDLE_GEMFILE'] = "#{current_path}/Gemfile"
  end
end
